# Production Docker Compose Configuration
# Kindle OCR System - Complete Stack
#
# Usage:
#   docker-compose -f docker-compose.prod.yml up -d
#   docker-compose -f docker-compose.prod.yml logs -f
#   docker-compose -f docker-compose.prod.yml down

version: '3.8'

services:
  # ========================================
  # PostgreSQL Database with pgvector
  # ========================================
  postgres:
    image: pgvector/pgvector:pg15
    container_name: kindle_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kindle_ocr}
      POSTGRES_USER: ${POSTGRES_USER:-kindle_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kindle_user} -d ${POSTGRES_DB:-kindle_ocr}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ========================================
  # Redis (Cache & Message Broker)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: kindle_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD must be set}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ========================================
  # FastAPI Application
  # ========================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: kindle_api_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kindle_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kindle_ocr}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:?ANTHROPIC_API_KEY must be set}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AMAZON_EMAIL=${AMAZON_EMAIL}
      - AMAZON_PASSWORD=${AMAZON_PASSWORD}
      - MONTHLY_TOKEN_CAP=${MONTHLY_TOKEN_CAP:-10000000}
      - RELEARN_CRON=${RELEARN_CRON:-0 3 * * *}
      - TIMEZONE=${TIMEZONE:-Asia/Tokyo}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./uploads:/app/uploads
      - ./captures:/app/captures
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # ========================================
  # Celery Worker (Background Tasks)
  # ========================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: kindle_worker_prod
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=100 --time-limit=3600
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kindle_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kindle_ocr}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AMAZON_EMAIL=${AMAZON_EMAIL}
      - AMAZON_PASSWORD=${AMAZON_PASSWORD}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./uploads:/app/uploads
      - ./captures:/app/captures
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # ========================================
  # Celery Beat (Scheduler)
  # ========================================
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: kindle_beat_prod
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info --scheduler=celery.beat:PersistentScheduler
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kindle_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kindle_ocr}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RELEARN_CRON=${RELEARN_CRON:-0 3 * * *}
      - TIMEZONE=${TIMEZONE:-Asia/Tokyo}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      - redis
      - postgres
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ========================================
  # Streamlit UI
  # ========================================
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: kindle_streamlit_prod
    restart: unless-stopped
    command: streamlit run app/ui/Home.py --server.port=8501 --server.address=0.0.0.0 --server.headless=true --server.maxUploadSize=200
    environment:
      - API_BASE_URL=http://api:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ========================================
  # Nginx Reverse Proxy (Optional)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: kindle_nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - streamlit
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # ========================================
  # Prometheus (Monitoring)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: kindle_prometheus_prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ========================================
  # Grafana (Visualization)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: kindle_grafana_prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?GRAFANA_PASSWORD must be set}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - kindle_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

# ========================================
# Networks
# ========================================
networks:
  kindle_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# ========================================
# Volumes (Persistent Data)
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
