version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kindle_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-kindle_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-kindle_password}
      POSTGRES_DB: ${DB_NAME:-kindle_ocr}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kindle_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kindle_network

  # Redis (for Celery broker)
  redis:
    image: redis:7-alpine
    container_name: kindle_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kindle_network

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kindle_api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-kindle_user}:${DB_PASSWORD:-kindle_password}@postgres:5432/${DB_NAME:-kindle_ocr}
      - REDIS_URL=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AMAZON_EMAIL=${AMAZON_EMAIL}
      - AMAZON_PASSWORD=${AMAZON_PASSWORD}
      - MONTHLY_TOKEN_CAP=${MONTHLY_TOKEN_CAP:-10000000}
      - RELEARN_CRON=${RELEARN_CRON:-0 3 * * *}
      - TIMEZONE=${TIMEZONE:-Asia/Tokyo}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./app:/app/app
      - ./captures:/app/captures
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kindle_network
    restart: unless-stopped

  # Celery Worker (OCR + RAG processing)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kindle_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-kindle_user}:${DB_PASSWORD:-kindle_password}@postgres:5432/${DB_NAME:-kindle_ocr}
      - REDIS_URL=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AMAZON_EMAIL=${AMAZON_EMAIL}
      - AMAZON_PASSWORD=${AMAZON_PASSWORD}
      - MONTHLY_TOKEN_CAP=${MONTHLY_TOKEN_CAP:-10000000}
      - TIMEZONE=${TIMEZONE:-Asia/Tokyo}
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./app:/app/app
      - ./captures:/app/captures
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kindle_network
    restart: unless-stopped

  # Streamlit UI
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kindle_streamlit
    command: streamlit run app/ui/Home.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - STREAMLIT_SERVER_HEADLESS=true
    volumes:
      - ./app:/app/app
      - ./captures:/app/captures
      - ./uploads:/app/uploads
    depends_on:
      - api
    networks:
      - kindle_network
    restart: unless-stopped

  # Celery Beat (Scheduler for relearn tasks)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kindle_celery_beat
    command: celery -A app.tasks.schedule beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-kindle_user}:${DB_PASSWORD:-kindle_password}@postgres:5432/${DB_NAME:-kindle_ocr}
      - REDIS_URL=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RELEARN_CRON=${RELEARN_CRON:-0 3 * * *}
      - TIMEZONE=${TIMEZONE:-Asia/Tokyo}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kindle_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  kindle_network:
    driver: bridge
